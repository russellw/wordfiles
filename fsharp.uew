/L12"F#" Line Comment = // Escape Char = \ String Chars = "' File Extensions = FS
/Delimiters = ~!@%^&*()-+=|\/{}[]:;"'<> ,	.?
/Indent Strings = "and" "elif" "else" "if" "rec" "while"
/Open Brace Strings = "(" "[" "{"
/Close Brace Strings = ")" "]" "}"
/C1"blue"
abstract
and
as
assert
base
begin
class
default
delegate
do
done
downcast
downto
elif
else
end
exception
extern
false
finally
fixed
for
fun
function
global
if
in
inherit
inline
interface
internal
lazy
let
match
member
module
mutable
namespace
new
not
null
of
open
or
override
private
public
rec
return
select
static
struct
then
to
true
try
type
upcast
use
val
void
when
while
with
yield
/C2"red"
asr
land
lor
lsl
lsr
lxor
mod
sig
atomic
break
checked
component
const
constraint
constructor
continue
eager
event
external
functor
include
method
mixin
object
parallel
process
protected
pure
sealed
tailcall
trait
virtual
volatile
/C3"yellow"
List
Array
seq
Map
Set
/C4"green"
bool
byte
sbyte
int16
uint16
int
uint32
int64
uint64
nativeint
unativeint
char
string
decimal
unit
void
float32
single
float
double
/C5"brown"
!
#
%
&
(
)
*
+
,
-
.
// /
:
;
<
=
>
?
@
[
]
^
{
|
}
~
